const db = require('../config/db');


exports.getProfile = (req, res) => {
    const userId = req.user.user_id; // Retrieve user_id from middleware

    if (!userId) {
        return res.status(400).json({ error: 'User ID is required' });
    }

    // Query to fetch user details
    const userQuery = `
        SELECT user_id, first_name, last_name, email, phone_number
        FROM Users
        WHERE user_id = ? 
    `;

    // Query to fetch user addresses
    const addressQuery = `
        SELECT address_id, address_name, address_line, city, phone_number, postal_code, country
        FROM Address
        WHERE user_id = ? AND order_id IS NULL
    `;

    // Execute the queries
    db.query(userQuery, [userId], (userErr, userResult) => {
        if (userErr) {
            console.error('Error fetching user details:', userErr);
            return res.status(500).json({ error: 'Internal server error' });
        }

        if (userResult.length === 0) {
            return res.status(404).json({ error: 'User not found' });
        }

        const user = userResult[0];

        db.query(addressQuery, [userId], (addressErr, addressResult) => {
            if (addressErr) {
                console.error('Error fetching addresses:', addressErr);
                return res.status(500).json({ error: 'Internal server error' });
            }
            
            // Combine user info and addresses in the response
            const response = {
                user_id: user.user_id,
                first_name: user.first_name,
                last_name: user.last_name,
                email: user.email,
                phone_number: user.phone_number,
                addresses: addressResult // This will be an array of address objects
            };

            res.json(response);
        });
    });
};


exports.deleteAddress = (req, res) => {
    const { address_id } = req.body;  
    const userId = req.user.user_id;  
  
    
    const query = `
      DELETE FROM Address 
      WHERE address_id = ? AND user_id = ?;
    `;
  
    
    db.query(query, [address_id, userId], (err, result) => {
      if (err) {
        console.error('Error deleting address:', err);
        return res.status(500).json({ error: 'Failed to delete address' });
      }
  
      
      if (result.affectedRows === 0) {
        return res.status(404).json({ error: 'Address not found or not owned by user' });
      }
  
      return res.status(200).json({ message: 'Address deleted successfully' });
    });
  }; 

  exports.addAddress = (req, res) => {
    // Get address data from the request body
    const { address_name, address_line, city, phone_number, postal_code, country } = req.body;
    const userId = req.user.user_id;  // Get user_id from authenticated user
  
    // SQL query to insert the new address into the Address table
    const query = `
      INSERT INTO Address (address_name, address_line, city, phone_number, postal_code, country, user_id)
      VALUES (?, ?, ?, ?, ?, ?, ?);
    `;
  
    // Use db.query() to insert the new address
    db.query(query, [address_name, address_line, city, phone_number, postal_code, country, userId], (err, result) => {
      if (err) {
        console.error('Error adding address:', err);
        return res.status(500).json({ error: 'Failed to add address' });
      }
  
      // If the address was added successfully, return the new address data
      return res.status(200).json({
        address_id: result.insertId, // The newly inserted address ID generated by the database
        address_name,
        address_line,
        city,
        phone_number,
        postal_code,
        country,
        user_id: userId,
      });
    });
  };


 exports.updateAddress =  (req, res) => {
    // Get address data and user_id from the request body and authenticated user
    const { address_id, address_name, address_line, city, phone_number, postal_code, country } = req.body;
    const userId = req.user.user_id;  // Get user_id from the authenticated user (req.user)
  
    // Initialize the fields that need to be updated
    const updatedFields = [];
    const values = [];
  
    // Dynamically build the update fields and corresponding values
    if (address_name) {
      updatedFields.push("address_name = ?");
      values.push(address_name);
    }
    if (address_line) {
      updatedFields.push("address_line = ?");
      values.push(address_line);
    }
    if (city) {
      updatedFields.push("city = ?");
      values.push(city);
    }
    if (phone_number) {
      updatedFields.push("phone_number = ?");
      values.push(phone_number);
    }
    if (postal_code) {
      updatedFields.push("postal_code = ?");
      values.push(postal_code);
    }
    if (country) {
      updatedFields.push("country = ?");
      values.push(country);
    }
  
    // Add the address_id and user_id to the values for the WHERE clause
    values.push(address_id, userId);
  
    // If there are no fields to update, return an error
    if (updatedFields.length === 0) {
      return res.status(400).json({ error: 'No fields to update' });
    }
  
    // Build the SQL query dynamically based on which fields are being updated
    const query = `
      UPDATE Address
      SET ${updatedFields.join(', ')}
      WHERE address_id = ? AND user_id = ?;
    `;
  
    // Use db.query() to execute the update query
    db.query(query, values, (err, result) => {
      if (err) {
        console.error('Error updating address:', err);
        return res.status(500).json({ error: 'Failed to update address' });
      }
  
      // If no rows were affected, return an error (address not found or not owned by user)
      if (result.affectedRows === 0) {
        return res.status(404).json({ error: 'Address not found or not owned by user' });
      }
  
      // Return the updated address data
      return res.status(200).json({
        message: 'Address updated successfully',
        address_id,
        address_name,
        address_line,
        city,
        phone_number,
        postal_code,
        country,
        user_id: userId,
      });
    });
  };